package com.mengyu.algs4.exercise.leetcode.graph;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author yu zhang
 */
public class Ex3243 {

    public static void main(String[] args) {
        int[][] queries = {{7,9},{14,26},{21,25},{6,10},{5,8},{6,9},{2,26},{5,24},{2,7},{3,17},{2,20},{6,13},{0,8},{2
                ,23},{8,20},{23,26},{21,24},{1,21},{17,23},{2,18},{7,22},{19,22},{5,12},{8,17},{11,21},{0,22},{7,20},
        {6,19},{2,15},{11,20},{14,19},{10,19},{3,21},{15,26},{16,24},{8,16},{13,22},{11,18},{7,21},{7,18},{3,26},{13,17},{14,24},{6,23},{9,24},{18,21},{2,4},{4,7},{20,26},{10,25},{0,19},{22,25},{1,3},{22,26},{0,12},{19,21},{9,25},{23,25},{13,26},{12,21},{6,15},{5,10},{5,26},{1,8},{16,21},{7,12},{21,26},{13,25},{1,10},{6,25},{4,17},{7,26},{12,20},{11,15},{24,26},{3,7},{6,17},{0,3},{14,20},{11,24},{12,25},{15,24},{5,22},{14,23},{2,10},{6,18},{0,7},{20,25},{10,23},{8,13},{8,18},{8,15},{13,16},{15,23},{7,25},{0,16},{10,20},{2,16},{3,6},{5,17},{3,11},{0,10},{8,19},{4,14},{20,23},{3,19},{3,12},{13,15},{11,13},{7,23},{14,22},{5,14},{18,24},{15,22},{5,15},{6,22},{3,14},{17,21},{18,20},{0,15},{0,18},{1,12},{5,7},{20,22},{12,17},{12,19},{5,9},{19,23},{19,25},{11,23},{9,14},{4,23},{2,21},{0,20},{1,13},{4,26},{0,25},{17,20},{8,21},{15,19},{20,24},{0,13},{10,12},{5,16},{12,22},{15,25},{0,17},{8,22},{18,25},{4,11},{0,14},{3,25},{4,6},{10,18},{5,23},{1,24},{17,24},{11,14},{7,10},{0,9},{0,5},{14,25},{10,14},{6,14},{12,18},{14,21},{2,5},{5,18},{11,25},{3,16},{11,22},{16,25},{17,22},{4,18},{0,23},{2,25},{13,19},{5,19},{2,8},{1,5},{5,11},{9,18},{17,26},{10,17},{11,17},{1,4},{11,16},{1,19},{1,25},{5,20},{4,15},{3,18},{5,13},{7,24},{15,17},{12,23},{2,19},{3,10},{3,13},{2,22},{2,12},{7,13},{4,12},{6,26},{4,9},{2,13},{7,14},{9,16},{9,17},{9,20},{1,23},{5,21},{3,5},{3,20},{9,15},{18,26},{3,23},{7,11},{1,18},{16,20},{10,21},{0,21},{6,21},{19,26},{3,15},{8,26},{1,22},{14,18},{16,19},{8,23},{10,13},{22,24},{6,11},{2,11},{7,17},{1,6},{15,18},{6,20},{2,14},{1,17},{8,24},{3,24},{12,14},{8,11},{9,22},{12,16},{8,12},{9,23},{7,16},{0,26},{9,12},{18,23},{3,22},{11,19},{6,12},{13,18},{1,15},{9,21},{7,15},{0,4},{4,24}};
        new Ex3243().shortestDistanceAfterQueries(27, queries);
    }

    public int[] shortestDistanceAfterQueries2(int n, int[][] queries) {
        // 从0到i的最短距离
        int[] distTo = new int[n];
        // 能到达i的，所有点
        List<Integer>[] starts = new List[n];
        for (int i = 0; i < n; i++) {
            distTo[i] = i;
            starts[i] = new ArrayList<>();
        }
        for (int i = 1; i < n; i++) {
            starts[i].add(i - 1);
        }
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int v = queries[i][1];
            starts[v].add(queries[i][0]);
            for (; v < n; v++) {
                for (int u : starts[v]) {
                    distTo[v] = Math.min(distTo[v], distTo[u] + 1);
                }
            }
            ans[i] = distTo[n - 1];
        }
        return ans;
    }

    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {
        List<Integer>[] adj = new List[n];
        for (int i = 1; i < n; i++) {
            adj[i] = new LinkedList<>();
        }
        for (int i = 0; i < n - 1; i++) {
            adj[i].add(i + 1);
        }
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            adj[query[0]].add(query[1]);
            ans[i] = bfs(adj, n);
        }
        return ans;
    }

    private int bfs(List<Integer>[] adj, int n) {
        int[] distTo = new int[n];
        for (int i = 0; i < n; i++) {
            distTo[i] = -1;
        }
        Queue<Integer> que = new LinkedList<>();
        que.offer(0);
        while (!que.isEmpty()) {
            int vertex = que.poll();
            for (int adjVertex : adj[vertex]) {
                if (distTo[adjVertex] != -1) {
                    continue;
                }
                que.add(adjVertex);
                distTo[adjVertex] = distTo[vertex] + 1;
            }
        }
        return distTo[n - 1];
    }
}
